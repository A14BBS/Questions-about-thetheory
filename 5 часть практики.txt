1. Что обнаруживается под тестовой группой?

      Тестовая среда
      
      Среда разработки - в ней разработчики пишут код, проводят отладку, исправляют ошибки, используют модульное тестирование. За этой средой так же собираются сборщики.
      
      Среда тестирования - в этой среде работают тестировщики. Тут тестируются билды. Здесь проверяют функционал, проводят регрессионные проверки, воспроизводят ошибки. Эта среда – время начала динамического тестирования.
      
      Интеграционная среда - иногда реализация в рамках среды тестирования, а иногда в рамках первичной среды. В этой среде собрана необходимая для сквозного тестирования схема взаимодействующих друг с другом модулей, систем, продуктов. Сообщественно, необходима она для интеграционного тестирования.
      
      Превью среды - в идеале, эта среда представляет собой максимальную или приближенную к продуктивности: те же данные, то же аппаратно-программное окружение, и же производительность. Она использовалась, чтобы сделать окончательную проверку ПО в условиях приближения к "боевым". Здесь тестировщики проводят заключительное сквозное функциональное тестирование, бизнес-пользователи проводят UAT, команду поддержки L3 и L2 используют DryRun (пробную установку релиза). Как правило, за эту среду отечает группа поддержки L3.
      
      Продакшн среда - среда, в которой работают приложения. С этой средой работает команда поддержки L2, устанавливая ПО или патчи с возникновением, выполняя, отвечая за работоспособность всех систем. ПО передаются в загрузке L3.
      
      В общем случае среды тестирования - это настройка программного и аппаратного обеспечения для тестирования.
      
-------------------------------------------------- -------------------------------------------

2. В чем отличие сборки от релиза?

       Сборка (сборка) - это номер, даваемый ПО приложению от заинтересованных тестировщиков.
       
       Release - это номер, даваемый ПО при рассмотрении потребителей.
       
-------------------------------------------------- --------------------------------------------

3. Основные фазы тестирования?

    1) Pre-Alpha - ПО является прототипом. Пользовательский интерфейс завершен. Но не все функции завершены. ПО не привлекает внимание.
    
    2) Alpha - молодежный программный продукт. Цель - для конкретного клиента в процессе разработки. Хороший Альфа-тест должен иметь четко выраженный план тестирования с комплексными тестами. Это дает представление о надежности программного обеспечения при заболеваниях печени. В некоторых случаях тестирование может быть передано на аутсорс.
    
    3) Бета: ПО стабильно и вы используете для ограниченной пользовательской базы. Цель состоит в том, чтобы получить отзывы клиентов о результатах и ​​соответствующих изменениях в ПО.
    
    4) Release Candidate (RC): о получении отзывов Бета-тест, вы вносите изменения в ПО и хотите проверить возникновение ошибок. На этом фоне вы не хотите проявлять радикальные изменения в функции, а просто возможно наличие ошибок. RC также выбрал для избранных.
    
    5) Выпуск: Все работает, ПО публикации для конкретного.
    
-------------------------------------------------- ------------------------------------------------------------

4. Что такое импакт анализ?

       Анализ влияния (импакт-анализ) — это исследование, позволяющее выделить места (затронутые области) в проекте при разработке новой или использования старой функции, а также определить, насколько они значительно были выделены.
       
-------------------------------------------------- -------------------------------------------------------------

5. Критерии выбора тестов?

       Критерий должен быть приятным , т.е. показать, когда речь идет о конечно же множественных тестах, достаточных для тестирования данной программы.
       
       Критерий должен быть полным , т.е. в случае ошибки следует подвергнуть тесту проверку на соответствие критерию, который раскрывает ошибку.
       
       Критерий должен быть безопасным, т.е. любые два случая, соответствующие друг другу, должны раскрываться или не раскрываться ошибки программы.
       
       Критерий должен быть легко проверяемым, например вычисляемым на тестах.
       
-------------------------------------------------- -------------------------------------------------- -

6. Принципы тестирования?

  1. Тестирование наличия дефектов
  Тестирование может показать, что дефекты есть, но не может быть понятно, что дефектов нет.
Вы не можете быть уверены, что таких испытаний нет, и вы не прошли проверку. Мы уже можем утверждать, что в настоящее время ПО имеют место дефекты.

  2.Исчерпывающее тестирование недостижимо
  Вместо расчета «протестировать все» необходим нестандартный подход к тестированию (стратегии), который обеспечивает правильный объем тестирования для данного проекта, данных заказчиков (и других выявленных лиц) и полученного продукта. При выборе, какой объем тестирования достаточен, необходимо учитывать уровень риска, включая технические риски и риски, связанные с бизнесом, и такие ограничения, как время проекта и бюджет. Оценка и управление рисками – одна из самых активных активностей в любом проекте.
  
  3.Раннее тестирование
  Тестовые активности должны начинаться как можно раньше в цикле развития и быть сфокусированы на выявлении нарушений.
Этот принцип связан с концепцией «цена дефекта» (стоимость дефекта). Цена дефекта очень высока на протяжении жизненного цикла разработки ПО. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить. Дефект, найденный в требованиях, обходится дешевле всего.
Еще одно важное преимущество раннего тестирования – экономия времени. Тестовые активности начинаются еще до того, как написана первая строчка кода. По мере того, как готовятся требования и анализы, тестировщики начинают приступать к разработке и пересмотру тестовых ключей. И когда появится первая тестовая версия, можно будет сразу приступить к выполнению тестов.

  4.Скопление/кластеризация дефектов
  Небольшое количество модулей имеет большое количество дефектов, обнаруживаемых на стадии предрелизного тестирования, или же учитывается предельное количество отказов на стадии эксплуатации.
Многие тестировщики наблюдали такой эффект – дефекты «кучкуются». Это может быть обусловлено тем, что определенная область кода имеет особую сложность и запутана, или потому, что внесение изменений производит «эффект домино». Это знание часто используется для оценки рисков при планировании тестов – тестировщики фокусируются на распространении «проблемных зон». Также полезно проводить анализ первопричин (анализ первопричин), чтобы предотвратить повторное возникновение дефектов, причины возникновения скоплений дефектов и спрогнозировать потенциальные скопления дефектов в будущем.

  5.Парадокс пестицида
  Если повторить те же тесты снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты. Повторное применение тех же тестов и тех же методов свидетельствует о том, что в продукте оказались именно те дефекты, против которых эти тесты и эти методы неэффективны.
Для обнаружения «парадокс пестицидов» необходимо наблюдать за обнаружением резистентных тест-кейсов и создавать новые, регистрируемые тесты, которые выполняются на различных частях системы.
 
  6.Тестирование зависит от контекста
  Тестирование повышено по-разному, в зависимости от контекста. Например, тестирование систем, потребление с точки зрения безопасности, иначе, чем тестирование сайта интернет-магазина.
Этот принципиально связанный с риском риск. Что такое риск? Риск – это потенциальная проблема. У вероятности есть вероятность (правдоподобие) – она всегда выше 0 и ниже 100% – и есть влияние (воздействие) – те негативные последствия, которые мы опасаемся. Анализируя риски, мы всегда взвешиваем эти два аспекта: вероятность и влияние.
То же можно сказать и о мире ПО: различные системы проявляются с наличием уровня риска, влияние того или иного дефекта также сильно варьируется. Некоторые проблемы довольно тривиальны, в некоторых случаях даже возникают травмы и смерти.
Уровень риска на выбор методологий, техники и типов тестирования.

  7.Заблуждение об отсутствии ошибок
  Нахождение и устранение дефектов бесполезно, если построенная система неудобна для использования и не соответствует требованиям и ожиданиям пользователей.
Заказчики ПО – люди и организации, которые покупают и используют его, чтобы осуществлять повседневные задачи – на самом деле совершенно не интересуются дефектами и их отклонением, за исключением тех случаев, когда они проявляются в значительной степени с повышенной чувствительностью продукта. Им также неинтересно, насколько ПО соответствует формальным требованиям, которые были задокументированы. Пользователи ПО более заинтересованы в том, чтобы он мог выполнять свою задачу. ПО должно быть указано, и именно с этой точки зрения они его оценивают.
Даже если вы выполнили все тесты и ошибки не были обнаружены, это еще не гарантирует, что ПО будет соответствовать нуждам и ожиданиям пользователей.
Иначе говоря, верификация != валидация.

  8. Мусор на входе, мусор на выходе (GIGO)
  В компьютерной науке «мусор на входе — мусор на выходе» (GIGO) — это концепция, в которой ошибочные или ошибочные входные данные воспринимаются как мусор или «мусор», т.е. при неверных входящих данных будут получены неверные результаты, даже если сам по себе алгоритмен. В тестах, таких как случаи, иногда обнаруживались намеренно, но я добавил этот принцип в общий список для того, чтобы оказать сильное влияние на поиск тестов, положительных или отрицательных.
    
-------------------------------------------------- ------------------------------------------------

7. Что такое независимое тестирование?

       Это тестирование специально дополнительно привлеченной компании ил группы людей, не учавствующих в некоммерческой деятельности ПО разработке.
       
-------------------------------------------------- --------------------------------------------------

8. Что такое тестирование со вкладом влево?

       В ходе испытаний были рассмотрены более ранние этапы жизненного цикла разработки при одновременном улучшении показателей качества, задачи смещаются влево в сценарий жизненного цикла разработки ПО. По возможности, тестирование должно иметь самое важное представление о разработке соответствующих приложений тестирования. Более подробно об этом говорится в подходе к тестированию программного обеспечения и тестированию системы, особенно в том, что касается тестирования на более повышенный интерес к жизненным циклам. Ключевые преимущества:
-Сокращение затрат
-Более высокое качество
-Повышение эффективности
-Конкурентные преимущества
       
-------------------------------------------------- -------------------------------------------------- -

9. Почему проводятся мероприятия по отдельным этапам?

-Каждый этап испытаний имеет свое значение
-Проще управлять поэтапно
-Мы играем разные тесты в разных средах
-Производительность и качество тестирования улучшаются с помощью поэтапного тестирования.
-------------------------------------------------- --------------------------------------------------

10. Какие есть этапы тестирования?

1. Работа с требованиями. Знакомство с заказчиком, который должен из себя получить результаты обсуждения продукта.
2. Разработка стратегии тестирования. Оценка продолжительности тестирования, выявление среды тестирования, объединение всей информации, полученной при работе с требованиями.
3. Создание тестовой документации. Написание тестов, которые проверяют функциональность.
4. Тестирование портотипа. Тестирование основного функционала продукта, корректировка целей, добавление фичей.
5. Основное тестирование. Выполнение общей проверки продукта.
6. Стабилизация. На практике происходит работа над устранением багов.
7. Эксплуатация. Проводится регресс-тестирование, устранение ошибок, которые нашли конечный пользователь.
-------------------------------------------------- -------------------------------------------------- -------------

11. Как вы тестируете продукт, если требования еще не зафиксированы?

Если спецификация недоступна для продукта, тогда план тестирования может быть создан на основе предположений, изготовленных из вторичного продукта. Но мы должны хорошо документировать все случаи обнаружения в планетарном тестировании.
-------------------------------------------------- ------------------------------------------------------------
12. Как вы узнали, было ли создано достаточно тестов для тестирования продукта?

Прежде всего, мы доказываем, что требуется хотя бы один тестовый пример. Если да, то можно сказать, что тестов достаточно для тестирования продукта.
-------------------------------------------------- ------------------------------------------------

13. Что обнаруживается под исследованиями данных?

Тестовые данные - это набор входных ощущений, пригодных для выполнения Тестовый пример. тестировщики определяют данные в соответствии с требованиями. Они могут сделать это вручную или использовать инструменты производства.
-------------------------------------------------- ------------------------------------------------
14. Что такое бета-тестирование?

Бета-тестирование происходит на конечных пользователях. Это необходимо для ожидания связи.
-------------------------------------------------- --------------------------------------------------
15. Что означает пилотное тестирование? (Пилот)

ЭКСПЕРИМЕНТАЛЬНОЕ тестирование Определение типа тестирования программного обеспечения, которое обнаруживает компонент системы или всю систему в режиме реального времени. Целью экспериментального теста является оценка осуществимости, времени, эффективности, эффективности и эффективности исследовательского проекта. Это тестирование проводится точно между UAT и Production. В экспериментальном тестировании выбранная группа конечных пользователей пробует тестовую систему и предоставляет услуги по полному развертыванию системы. Таким образом, это означает проведение общей репетиции для теста на употребление. Пилотное тестирование помогает выявить ошибки в Системе.
Экспериментальное тестирование с установлением системы на площадке заказчика (или в среде, моделируемой пользователем) для тестирования на предмет регулярного и регулярного использования. Выявлены следующие возможности для развития событий в виде отчетов об ошибках, и эти ошибки исправляются в сборке системы. Во время этого процесса иногда приемное тестирование также включает как часть тестирования на совместимость. Это происходит, когда система реализуется для замены предыдущего.

-------------------------------------------------- -------------------------------------------------- ----
16. Чем отличается сборка от релиза?

       Сборка (сборка) - это номер, даваемый ПО приложению от заинтересованных тестировщиков.
       
       Release - это номер, даваемый ПО при рассмотрении потребителей.
       
-------------------------------------------------- --------------------------------------------------

17. Что такое бизнес – логика?

       Это то, что конкретная программа по задумке должна быть сделана. Например, в складской программе проверки на возможность отправить товар (у друга его нет в наличии). Эти правила должны соблюдаться в данной конкретной программе защиты бизнес-клиентом. Слои преложений, слой пользовательского интерфейса, слой бизнес-логики, слой отображения данных.
    
-------------------------------------------------- -------------------------------------------------- --------------
18. Какие побочные эффекты ПО?

     Функциональные виды («Что?» - включает весь функциональный продукт):
  -Функциональное тестирование (Функциональное тестирование)
  -Тестирование взаимодействия (Interoperability testing)
     Нефункциональное («Как?»):
-Производительность (Производительность)
-Тестирование емкости/способностей (Capacity testing)
-Стрессовое (Стресс-тестирование)
-Нагрузочное (нагрузочное тестирование)
-Объемное тестирование (Объемное тестирование)
-Выносливости (тестирование на выдержку/выносливость)
-Стабильности/надежности (Тестирование стабильности/надежности)
-Шиповое (Шип)
-Отказоустойчивость (Тестирование стабильности)
-Масштабируемости (Тест масштабируемости)
-Отказ и восстановление (Failover and Recovery testing)
-Удобство пользования (Юзабилити-тестирование)
-Тестирование установки (Installation testing)
-Тестирование безопасности (тестирование безопасности и контроля доступа)
-Конфигурационное (Тестирование конфигурации)
     Связанное с изменениями:
-Регрессионное (Регрессионное тестирование)
-Санитарное (тестирование на вменяемость)
-Дымовое (дымовое тестирование)
-Тестирование сборки (Build Verification testing)
-------------------------------------------------- --------------------------------------------------------------
19. Методы тестирования?

Метод черного ящика (тестирование черного ящика) когда нет доступа к коду.
метод ящика белого (white box) когда есть доступ к коду.
метод серого ящика (серый ящик), когда есть частичный доступ к коду.
 
-------------------------------------------------- -------------------------------------------
20. Что такое пирамида / уровни тестирования?

«Пирамидные тесты» — метафора, которая означает, что групповая проверка требует детализации разного уровня. Она также дает представление, какое количество тестов должно быть в каждой из этих групп. 
В тесте более высокого уровня вы не тестируете всю условную логику и пограничные случаи, которые уже связаны с юнит-тестами более высокого уровня. Убедитесь, что тесты высокого уровня фокусируются только на том, что не охватываются тестами более высокого уровня.
-------------------------------------------------- -------------------------------------------------- ---------------------------

21. Что такое деструктивное/разрушающее/негативное тестирование? (DT — Разрушающий контроль)

ОТРИЦАТЕЛЬНОЕ ТЕСТИРОВАНИЕ - тип обнаружения ПО для поиска точек отказа в программном обнаружении, который вызывает возникновение возникновения чрезвычайных ситуаций (срабатывание валидаторов на данные по автору), а также вызывает, что вызываемая приложением функция не возникает при срабатывании валидатора. Неожиданные условия могут быть чем угодно, от неправильного типа данных до хакерской атаки. Целью отрицательного обнаружения является обнаружение сбоя в приложениях из-за нарушения входных данных. Просто мы предлагаем положительное тестирование, мы только уверены, что наша система работает в нормальных условиях. Мы предполагаем, что наша система может быть окружена непредвиденными ситуациями, чтобы иметь 100% безошибочную систему.
Типичные примеры: введите неправильно составленный адрес электронной почты и номер телефона, загрузите файл, не предусмотренного расширения или размера.
-------------------------------------------------- -------------------------------------------------- --------------------------------------------------

22. Что такое неразрушающее/неразрушающее/позитивное тестирование? (НК – неразрушающий контроль)

НЕДЕСТРУКТИВНОЕ ТЕСТИРОВАНИЕ - это тип тестирования программного обеспечения, который включает в себя правильное взаимодействие с программным обеспечением. Другими словами, неразрушающее тестирование (НК) также можно назвать позитивным тестированием или тестированием «счастливого пути». Это дает результаты и доказывает, что продукты обеспечиваются так, как ожидалось. Пример: - Ввод правил данных в модуль входа в систему и проверку, принимает ли он учетные данные и включает в себя страницу.
-------------------------------------------------- -------------------------------------------------- -------------------------------------
23. Что происходит под компонентным/модульным/юнит тестированием? (Компонент/модуль/юнит-тестирование)

Это процесс, в котором тестируются определенные компоненты исходного кода программы. (эти тесты обычно проводят сами художники)
-------------------------------------------------- -------------------------------------------------- ----------------------------

24. Что обнаруживается под интеграционным тестированием?

Интеграционное тестирование для обнаружения хорошо два или более модулей ПО взаимодействию с другими частями системы (операционной системы, либо совокупности связей между частями мозга).
-------------------------------------------------- -------------------------------------------------- -----------------------------

25. В чем разница между модульным тестированием и интеграционным тестированием?

Модульное тестирование — это тестирование нескольких модулей, а интеграционное тестирование — это тестирование между модулями.
-------------------------------------------------- -------------------------------------------------- -

26. Что такое системное интеграционное тестирование? (SIT — тестирование системной интеграции)

Это тип тестирования программного обеспечения, проводимого во всеобъемлющей аппаратной и программной среде для проверки поведения всей системы. Это тестирование, проведенное по полной всеобъемлющей системе для оценки соответствия системы ее установленным требованиям. SIT обнаружен для обнаружения взаимодействия между модулями программной системы. Оно занимается проверкой соответствия требованиям к программному обеспечению высокого и пониженного уровня, снижением требований к программному обеспечению/спецификацией и документом по проектированию программного обеспечения. Он также обнаружил сосуществование программной системы с другими и тестирует интерфейс между модулями программных приложений. В этом типе тестирования модули сначала тестируются индивидуально, затем объединяются в систему. Например, программные и / или аппаратные компоненты объединяются и тестируются постепенно,
-------------------------------------------------- -------------------------------------------------- ------------
27. В чем разница между тест-драйвером и тест-заглушкой? (Тестовый драйвер и тестовая заглушка)

Тестовый драйвер - это фрагмент кода, который вызвал тестируемый программный компонент. Это полезно при тестировании по применению «снизу-вверх». Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности. Они актуальны для тестирования, в котором используется нисходящий подход. Давайте возьмем пример.
1. Допустим, есть сценарий для проверки интерфейса между модулями A и B. Мы разработали только модуль-A. Затем мы предлагаем проверить модуль-A, если у нас есть реальный модуль-B или фиктивный модуль для него. В этом случае мы называем модуль-B тестовой заглушкой.
2. Теперь модуль B не может передавать данные напрямую из модуля A.
Заглушки и драйверы не реализуют всю логику программного модуля, а только моделируют обмен данными с вызывающим модулем. Заглушка: восстание тестируемым модулем. Драйвер: модуль для тестирования.
-------------------------------------------------- -------------------------------------------------- --------------------------

28. Что обнаруживается под системным тестированием?

Системное тестирование качественно отличается от интеграционного и модульного уровней. Системное тестирование рассматривает тестируемую систему в целом и оперирует на уровне резкого интерфейса, в отличие от последних фаз интеграционного тестирования, которое оперирует на уровне интерфейсов модулей. нарушения и цели уровней чувствительности. На уровне системы часто сложно и малоэффективно анализировать прохождение тестовых траекторий внутрипрограммы или правильность работы Специфические функции. Основная задача системного тестирования - выявление дефектов, работа системы в комплексе, такие как неверное использование ресурсов системы, непредусмотренные обнаружение данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность,
Системное тестирование проводится над проектом в целом с использованием метода "черного ящика". Структура не имеет никаких значений, для проверки программ доступны только входы и выходы, видимые пользователи.
-------------------------------------------------- -------------------------------------------------- --------------------------------------------------
29. Что такое функциональное тестирование?

Функциональное исследование рассматривает особое свойство, которое обнаруживается при анализе особенностей функциональности компонента или системы в целом.
-------------------------------------------------- -------------------------------------------------- --
30. Что такое тестирование/взаимодействие? (Тестирование совместимости/интероперабельности)

Тестирование взаимодействия - функциональное тестирование возможности/устройства в сочетании с более компонентами/системами/устройствами и включающее себя в тестирование (тестирование на совместимость) и интеграционное тестирование (интеграционное тестирование).
-------------------------------------------------- -------------------------------------------------- ----

31. Что такое тестирование по руководству? (Тестирование на соответствие/соответствие)

Тестирование на соответствие — это тип тестирования программного обеспечения, который удостоверяет, что система программного обеспечения соответствует требованиям IEEE, W3C или ETSI. Результаты проверки соответствуют этому стандарту, чтобы определить, в какой степени он соответствует требованиям этого стандарта.
-------------------------------------------------- ----------------------------------

32. Что такое нефункциональное тестирование?

НЕФУНКЦИОНАЛЬНОЕ тестирование как тип тестирования ПО для проверки нефункциональных аспектов ПО. Он предназначен для проверки системы по неэффективным параметрам, которые никогда не учитываются при функциональном тестировании.
-------------------------------------------------- -------------------------------------------------- ------

33. Что вы знаете о Тестировании удобства пользования?

Тестирование удобства пользования - это метод тестирования, ориентированный на установленное удобство использования, обучаемость, понятность и привлекательность для пользователей разрабатываемого продукта в заданных условиях.
-------------------------------------------------- -------------------------------------------------- ---------------

34. Отличия от тестирования на удобство пользования и тестирования доступности? (Юзабилити против тестирования доступности)

Тестирование ЭКСПЛУАТАЦИОННОЙ ПРИГОДНОСТИ показывает, насколько проста и удобна система программного обеспечения. Здесь небольшой набор обычных пользователей «использует» программную систему для обнаружения дефектов юзабилити. Особое внимание в этом тестировании уделяется простому использованию приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта (UX — «Ю-Экс», пользовательский опыт). Это тестирование рекомендуется на начальном этапе разработки SDLC, что позволяет лучше понять ожидания пользователей. Исследование (Virzi, 1992 и Neilsen Landauer, 1993) показало, что 5 пользователей достаточно для обнаружения 80% проблем с некоторыми юзабилити, за исключением случаев накопления других цифр.
Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования. Его цель - наверняка в том, что наш продукт удобен в коллекции для людей с распространенными недействительными или обнаруженными. Это могут быть проблемы с обзором, слухом или ограничением в подвижности рук.
-------------------------------------------------- ------------------------------------

35. Что такое тестирование интерфейса?

Это тип интеграционного теста, который включает, правильно ли установленную связь между внешними общедоступными программами или их частями (модулями). Соединение, которое включает два компонента, называется интерфейсом. Этот интерфейс в компьютерном мире может быть чем угодно, как API, так и веб-сервисами и т.д. д. Тестирование подключаемых сервисов или поверхность называется Тестирование поверхности.
Тестирование включает в себя тестирование двух основных сегментов:
Интерфейс веб-сервера и сервера приложений
Интерфейс приложения и базы данных
-------------------------------------------------- ----------------------------------

36. Что такое тестирование рабочего процесса/воркфлоу? (тестирование рабочего процесса)

Это тип тестирования программного обеспечения, который предполагает, что каждый рабочий процесс программного обеспечения точно соответствует качеству данного бизнес-процесса. Рабочий процесс — это серия задач для достижения желаемого результата, которая обычно включает несколько шагов или шагов. Для любого этого бизнес-процесса тестирование последующих шагов как «Тестирование рабочего процесса».
Например, будьте уверены, что система может быть установлена ​​на платформе пользователя и работает корректно. Тестирование рабочего процесса ведется поэтапно. Вот как вы реализуете тестирование рабочего процесса:
Начальная фаза (начальная фаза): эта фаза включает начальное исследование испытаний и тестирование прототипа.
Фаза разработки (Этап разработки): Этап фазы включает базовую архитектуру тестирования
Фаза строительства (Этап строительства): эта фаза включает в себя сильные испытания в каждой сборке
Фаза перехода (фаза перехода): Этап фазы включает в себя повторные регрессионные тесты и тесты исправлений
-------------------------------------------------- -------------------------------------------------- ----

37. Что вы знаете о пользовательском приемном тестировании? (UAT – приемочное тестирование пользователей)

Пользовательское приемочное тестирование (UAT) — это тип тестирования, выполняемый конечным пользователем или клиентом для проверки/принятия ПО перед его перемещением в производство. UAT преуспевал в достижении результатов функциональных, интеграционных и системных испытаний. Основной целью UAT является проверка сквозного бизнес-потока. Он не фокусируется на косметических ошибках, орфографических ошибках или системе тестирования. Приемочное тестирование по особому повышенному уровню чувствительности с настройкой данных, аналогичным производственным. Это своего рода тестирование черного ящика, в котором встречаются два или более конечных пользователей. Этапы:
-Анализ бизнес-требований
-Создать тестирование UAT
-Определить тестовый сценарий
-Создать тестовый кейс UAT
-Подготовить тестовые данные (Production like Data)
-Запустить тестовый пример
-Записать результаты
-подтвердить бизнес-цели
-------------------------------------------------- -------------------------------------------------- -----------

38. Что такое экспериментальное приемочное тестирование? (OAT — Эксплуатационные приемочные испытания)

ИСПЫТАНИЕ НА ЭКСПЛУАТАЦИЮ (OAT) - это тип тестирования программного обеспечения, который оценивает операционную готовность программного обеспечения к его выпуску в производство. Целью эксплуатации является обеспечение работы системы в ее стандартной среде (SOE - стандартная операционная среда). Это также называется Оперативное тестирование (Оперативное тестирование). Эксплуатационное приемочное тестирование изучает систему и компоненты для стандартных приложений (SOE). Типы ОАТ:
Тестирование установки
Операция тестирования нагрузки и производительности
Тестирование резервного копирования и восстановления
Тестирование безопасности
Анализ кода
Отказ при тестировании
Тестирование восстановления
Сквозная тестовая среда Оперативное тестирование
Обзор эксплуатационной документации
Примеры Тестовый пример:
Резервные копии, сделанные на одном сайте, размещены на том же сайте.
Резервные копии, сделанные на одном сайте, можно развернуть на другом сайте.
Внедрение любых каких-либо функций в живую производственную среду не должно уменьшать влияние на первоначальные производственные услуги.
Процесс получения может быть воспроизведен с использованием действующей документации
Каждый компонент может быть отключен и успешно запущен в согласованные сроки.
Для предупреждений - всеобщее возбуждение должно идти в TEC и приводить к правильному решению.
Оповещения появляются и выдаются при превышении согласованных пороговых значений
Любая документация по сбору, созданная или измененная, включая сервисные диаграммы, действующая
Это должно быть передано в регионы поддержки.
Любой компонент, на который происходит сбой, должен показывать рекомендуемый порядок перезапуска, время завершения и т.д. д.
-------------------------------------------------- ------------------------

39. Что такое инсталляционное тестирование?

Тестирование инсталляции (установки) направлено на проверку успешной инсталляции и обновление ПО, как десктопного, так и медиа.
Тестирование инсталляции в большинстве своем не входит в веб-тестирование, являясь специализированным тестированием установки приложений на различные операционные системы.
-------------------------------------------------- ------------

40. Что вы знаете о тестировании безопасности?

Это тип тестирования ПО, который выявляет уязвимость, опасность и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компаний, сотрудников или клиентов. Общая стратегия безопасности достигается за счет трех основных показателей:
Конфиденциальность - сокрытие ресурсов ресурсов или информации
Целостность – ресурс может быть изменен только в соответствии с полномочиями пользователя
Доступность - ресурсы должны быть изменены только авторизованному внутреннему, внутреннему объекту или устройству.
-------------------------------------------------- ------------------------------------------------------------
41. Что такое конфигурационное тестирование?

Конфигурационное тестирование (Configuration testing) — особый вид тестирования, направленный на проверку работы ПО при различных аппаратных и программных настройках системы (заявленных платформах, требуемых драйверах, при различных конфигурациях компьютеров и т. д. )
-------------------------------------------------- -------------------------------------------------- ---

42. Объясните, что такое тестирование N+1

Вариант регрессионного тестирования представлен как N+1. В этом методе выявлено несколько циклов, обнаружены ошибки, обнаруживаются в тестах в цикле «N», обнаруживаются и повторно тестируются в тестовом цикле N + 1. Цикл повторяется, пока не будет найдено ни одной ошибки.
-------------------------------------------------- -----------------------
43. Что вы знаете о тестировании сборки? (Тест проверки сборки)

естирование, направленность на выявление выявленной версии, критерии качества для выявления. По своему содержанию он является аналогом Дымового Тестирования, направленного на прием новой версии в развитии или подозрении. Вглубь оно может проникать дальше, в зависимости от устойчивости к качеству выпускаемой версии.
-------------------------------------------------- --------------------------------------------------

44. Что такое тестирование потоков? (тестирование темы)

Тестирование потоков Оценка как тип тестирования программного обеспечения, который предполагает основные функциональные возможности конкретной задачи (потока). Обычно возникают на ранней стадии фазы интеграционного тестирования. Тестирование на основе потоков является одним из экстремальных испытаний, проводимых в процессе тестирования системной оценки. Поэтому его, вероятно, следует более правильно назвать «тестом потокового взаимодействия».
Тестирование на основе потоков подразделяется на две категории:
Однопоточное тестирование включает одну транзакцию приложения за раз
Многопоточное тестирование одновременно включает несколько активных транзакций
Как производить:
Тестирование на основе потоков представляет собой обобщенное представление о основе сеансов (сеансовое тестирование), в котором сеансы представляют собой выделение потока, но поток не обязательно является сеансом.
Для потока, потока или программы (небольшая функциональность) интегрируются и тестируются постепенно как подсистема, а затем потребляются для всей системы.
На самом низком уровне он предоставляет интеграторам лучшее представление о том, что тестировать.
Кроме того, требуется особое тестирование программных компонентов, чтобы интеграторы сосредоточились на тестировании путей решения задач в общей системе.
-------------------------------------------------- -----------------------
45. Что вы знаете о мутационном тестировании? (мутационное тестирование)

Мутационное тестирование - это тип тестирования мягкого стресса, в котором мы мутируем (регулируем) реакцию в исходном коде и проверяем, уровень ли Test case найти ошибки. Это тип тестирования белого ящика, который в основном используется для модульного тестирования. Изменения в мутантной программе очень важны, поэтому это не влияет на общую цель программы. Цель Тестирование мутаций - оценка качества Тестовый пример, который должен быть достаточно надежным, чтобы не выполнять мутантный код. Этот метод также называется стратегией тестирования на основе ошибок, так как он включает в себя создание ошибок в программе.
Шаг 1: Ошибки в исходном коде программы путем создания версии, называемой мутантами. Каждый мутант должен получить одну ошибку, и он состоит в том, чтобы получить разрешение на мутацию по терпеть неудачу, чтобы избежать эффективности Тестовый пример.
Шаг 2: Тестовый пример применения к исходной программе, также к программе мутанта.
Шаг 3: Сравните результаты оригинальной и мутантной программы.
Шаг 4: Если исходная программа и программы-мутанты генерируют разные выходные данные, то этот мутант уничтожается тестовым случаем. Следовательно, тестовый пример достаточно хорош, чтобы свойства были изменены между исходной и мутантной средой.
Шаг 5: Если исходная программа и программа-мутант генерируют выходные данные, мутант остается в живых. В таких случаях необходимо создать более мутантов.
Что изменить в программе мутантов? Есть несколько методов, которые были использованы для создания мутантных программ:
Операторы замены операндов (операторы замены операндов) – например, в вероятности, если (x> y) поменять местами значения x и y
Операторы модификаций выражений (операторы модификации выражений) – например, в вероятности if (х == у) Мы можем заменить == на >=
Операторы модификации (операторы модификации оператора) — например, удалить часть else в конструкции if-else или удалить возникновение явления if-else, чтобы проверить, как вызвать себя программа
Оценка мутаций = (убитые мутанты / общее количество мутантов) * 100

Автоматизированные инструменты для разных ЯП: mutmut, Humbug и Infection и т.п.
-------------------------------------------------- --------------------------------------

46. ​​В чем разница между базовым и эталонным тестированием?

Базовый уровень предполагаемо для оценки производительности приложений. Benchmark сравнивает производительность приложений с отраслевым стандартом.
Базовое тестирование использует данные, собранные для производства. Контрольный показатель показывает, что целевом приложении по сравнению с другими приложениями.
Базовое тестирование сравнивает текущую производительность с производительностью приложений, тогда как Benchmark сравнивает производительность наших приложений с производительностью продуктов.
-------------------------------------------------- --------------------------------------

47. Что такое A/B тестирование?

A/B-тестирование также называется сплит-тестированием (split). При тестировании AB мы разрабатываем и анализируем два варианта приложения, чтобы найти, какой вариант работает лучше с точки зрения пользовательского опыта, пробы, конверсий или любой другой цели, а из окончательного варианта в конечном итоге получится наиболее естественный вариант.
Давайте попробуем понять это явление. у нас есть интернет магазин и обзор. В какой-то момент (новые маркетинговые исследования/пожелания клиента и т. д.) решено изменить дизайн выдачи товаров в каталоге. Независимо от того, сколько проведено анализа, выпуск нового пользовательского интерфейса будет большим изменением и может иметь неприятные последствия.
В этом случае мы можем использовать A / B-тестирование. Мы создадим интерфейс нового варианта и выпустим его для охвата пользователей. Например, мы распределяем пользователей в 50:50 или 80:20 между двумя вариантами - A и B. Таким образом, тестирование A/B помогает принять решение о выборе лучшего варианта.
-------------------------------------------------- --------------------

48. Что означает сквозное тестирование? (E2E — Сквозное)

Сквозное тестирование — это стратегическое тестирование для выполнения тестов, которые охватывают все возможные потоковые приложения от его начала до конца; принять программную систему вместе с ее интеграцией с внешними интерфейсами. Целью сквозного тестирования является создание полного производственного сценария, выявление программных зависимостей и утверждение, что между частотными программными модулями и подсистемами используется правильный ввод. Сквозное тестирование обычно выше после функционального и системного тестирования. Он использует данные ресурсов, такие как данные и тестовая среда, для настройки настроек в среде времени. Сквозное тестирование также называется цепным тестированием (Chain testing).
Для чего оно нужно? Современные программные системы обнаруживаются и взаимодействуют с многочисленными подсистемами. Подсистема может сравниться с системой наблюдения или может управлять другой организацией. Если какая-либо из подсистем из конструкции, вся система программного обеспечения может рухнуть. Это серьезный риск, и его можно избежать путем сквозного тестирования.
-------------------------------------------------- ----------------------------------
49. В чем разница между E2E и системным тестированием?


50. Что такое параллельное тестирование? (параллельное тестирование)

Это несколько типов тестирования ПО, которое объединяет несколько приложений или подкомпонентов одного приложения, чтобы ограничить время выполнения теста. При одновременном тестировании тестировщик запускает две версии в сочетании с разными теми же вкладами. Цель состоит в том, чтобы Председатель провел ли себя новую систему и систему одинаково или по-разному. Это гарантирует, что новая система достаточно доступна для высокой производительности программного обеспечения.
-------------------------------------------------- ------------------------------